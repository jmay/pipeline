#!/usr/bin/env perl

use strict;
use Text::CSV_XS;
use Getopt::Long;
use YAML::Syck;

=head1 NAME

deltas - calculate internal deltas in the input data

=head1 DESCRIPTION

Read TSV from stdin, compute deltas, write results to stdout

=head1 CONTRACT

Standard TSV contract for input and output

The C<ordercol> column is EXPECTED to contain integer values

The C<ordercol> values are EXPECTED to be unique.  No duplicate detection will be done.

Output WILL BE ordered by the C<ordercol> values.

=head1 OPTIONS

  --ordercol colnum [REQUIRED] input column containing the ordered sequence (usually chron)
  --datacol colnum [REQUIRED] column containing data to compute deltas on
  --interval number [OPTIONAL, DEFAULT = 1] interval in the ordering column to calculate deltas on
  --percent [OPTIONAL, DEFAULT = absolute] compute absolute or percentage deltas
  --float [OPTIONAL, default is integer] interpret input data as floats instead of integers

=head1 NOTES

If there are gaps in the ordering (chron) series in the input, there will be gaps in the output.
Gaps will not cause errors.

=cut

my $USAGE = "usage: deltas --ordercol colnum --datacol colnum [--interval interval] [--percent 1/0] [--float 1/0]";

my ($ordercol, $datacol, $interval);
my $percent = 0;
my $float = 0;
GetOptions(
  'ordercol=i' => \$ordercol,
  'datacol=i' => \$datacol,
  'interval=i' => \$interval,
  'percent=i' => \$percent,
  'float=i' => \$float,
  );
die $USAGE, "\n" unless defined($ordercol) && defined($datacol);

# defaults
$interval ||= 1;


my $csv_options = {
  binary => 1,
  sep_char => "\t",
};
my $csv = Text::CSV_XS->new($csv_options);

######################################################################
## CONVERT INPUT
######################################################################

binmode STDIN, ":utf8";
binmode STDOUT, ":utf8";

my (%fullrows, %data);

while (<STDIN>) {
  if (my $status = $csv->parse($_)) {
    my @fields = $csv->fields;

    my $chron = $fields[$ordercol];

    $fullrows{$chron} = \@fields;

    my $value = $fields[$datacol];
    $data{$chron} = $value;
  }
}

my %results;
my ($min_chron, $max_chron, $min_result, $max_result);

for my $chron (sort keys %fullrows) {
  my $prev_chron = $chron - $interval;  # step back N intervals (months, quarters, years, whatever)

  next if !defined $data{$prev_chron};  # the output won't have a result row for this chron


  my $this_value = $data{$chron};
  my $prev_value = $data{$prev_chron};

  my @result_row = @{$fullrows{$chron}};

  my $this_result;
  if ($percent) {
    # relative (percent) change
    $this_result = sprintf("%0.4f", ($this_value - $prev_value) / $prev_value * 100);
  } else {
    # absolute change
    if ($float) {
      # float difference TODO: why is this treated separately?
      $this_result = sprintf("%0.3f", $this_value - $prev_value);
    } else {
      # integer difference
      $this_result = $this_value - $prev_value;
    }
  }

  $result_row[$datacol] = $this_result;

  if (!$max_chron) {
    # first row
    $min_chron = $max_chron = $chron;
    $min_result = $max_result = $this_result;
  } else {
    $min_chron = $chron if $chron < $min_chron;
    $max_chron = $chron if $chron > $max_chron;
    $min_result = $this_result if $this_result < $min_result;
    $max_result = $this_result if $this_result > $max_result;
  }

  $results{$chron} = \@result_row;
}

my @fields;
for my $chron (sort keys %results) {
  @fields = @{$results{$chron}};
  if ($csv->combine(@fields)) {
    print $csv->string, "\n";
  }
}

my @column_data = map { {} } @fields;
$column_data[$ordercol] = {
  ':min' => $min_chron,
  ':max' => $max_chron,
};
$column_data[$datacol] = {
  ':min' => $min_result,
  ':max' => $max_result,
};

my $stats = {
  ':nrows' => scalar(keys %results),
  ':columns' => \@column_data,
};

print STDERR Dump($stats);
